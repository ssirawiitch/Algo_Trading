//@version=6
strategy("Price Behavior Analysis on Key Levels - Breakout & Reversal Only", overlay=true, margin_long=0)

// ==== Input Parameters ====
startLevel = input.float(575, "Start Level", minval=0)
endLevel = input.float(1000, "End Level", minval=0)
interval = input.float(25, "Level Interval", minval=1)

// ==== User-Defined Type ====
type BehaviorCounts
    map<string, int> countsMap

// ==== Global Variables ====
var map<float, BehaviorCounts> level_behavior_counts = map.new<float, BehaviorCounts>()
var float totalReversals = 0.0
var float totalBreakouts = 0.0
var float[] keyLevels = array.new_float()

// Hourly tracking
var map<int, int> breakoutPerHour = map.new<int, int>()
var map<int, int> reversalPerHour = map.new<int, int>()

// ==== Create Key Levels ====
if barstate.isfirst
    totalReversals := 0.0
    totalBreakouts := 0.0

    float currentLevel = startLevel
    while currentLevel <= endLevel
        array.push(keyLevels, currentLevel)

        BehaviorCounts bc = BehaviorCounts.new()
        bc.countsMap := map.new<string, int>()
        map.put(bc.countsMap, "Breakout_Resistance_Up", 0)
        map.put(bc.countsMap, "Reversal_Resistance_Down", 0)
        map.put(bc.countsMap, "Breakout_Support_Down", 0)
        map.put(bc.countsMap, "Reversal_Support_Up", 0)

        map.put(level_behavior_counts, currentLevel, bc)
        currentLevel += interval

    for level in keyLevels
        line.new(x1=bar_index, y1=level, x2=bar_index + 500, y2=level, color=color.new(color.gray, 90), width=1, extend=extend.right)

// ==== Behavior Detection ====
if barstate.isconfirmed
    float barBreakouts = 0.0
    float barReversals = 0.0
    float atr = ta.atr(14)
    int hr = hour(time)

    for level in keyLevels
        BehaviorCounts bc = map.get(level_behavior_counts, level)
        map<string, int> counts = bc.countsMap

        // Resistance
        bool breakoutRes = close > level and close[1] <= level
        bool reversalRes = high >= level and close < open and close <= level and close > level - atr * 0.5

        if breakoutRes
            map.put(counts, "Breakout_Resistance_Up", map.get(counts, "Breakout_Resistance_Up") + 1)
            barBreakouts += 1
            map.put(breakoutPerHour, hr, nz(map.get(breakoutPerHour, hr)) + 1)

        if reversalRes
            map.put(counts, "Reversal_Resistance_Down", map.get(counts, "Reversal_Resistance_Down") + 1)
            barReversals += 1
            map.put(reversalPerHour, hr, nz(map.get(reversalPerHour, hr)) + 1)

        // Support
        bool breakoutSup = close < level and close[1] >= level
        bool reversalSup = low <= level and close > open and close >= level and close < level + atr * 0.5

        if breakoutSup
            map.put(counts, "Breakout_Support_Down", map.get(counts, "Breakout_Support_Down") + 1)
            barBreakouts += 1
            map.put(breakoutPerHour, hr, nz(map.get(breakoutPerHour, hr)) + 1)

        if reversalSup
            map.put(counts, "Reversal_Support_Up", map.get(counts, "Reversal_Support_Up") + 1)
            barReversals += 1
            map.put(reversalPerHour, hr, nz(map.get(reversalPerHour, hr)) + 1)

    totalBreakouts += barBreakouts
    totalReversals += barReversals

// ==== Final Summary ====
var label resultLabel = na
if barstate.islast
    string summary = "Price Behavior Summary:\n"
    float finalBreakouts = 0.0
    float finalReversals = 0.0

    for level in keyLevels
        BehaviorCounts bc = map.get(level_behavior_counts, level)
        map<string, int> counts = bc.countsMap

        int br = map.get(counts, "Breakout_Resistance_Up")
        int rr = map.get(counts, "Reversal_Resistance_Down")
        int bs = map.get(counts, "Breakout_Support_Down")
        int rs = map.get(counts, "Reversal_Support_Up")

        if br + rr + bs + rs > 0
            summary += "--- Level " + str.tostring(level) + " ---\n"
            if br > 0
                summary += "  Breakout Resistance (Up): " + str.tostring(br) + "\n"
            if rr > 0
                summary += "  Reversal from Resistance (Down): " + str.tostring(rr) + "\n"
            if bs > 0
                summary += "  Breakout Support (Down): " + str.tostring(bs) + "\n"
            if rs > 0
                summary += "  Reversal from Support (Up): " + str.tostring(rs) + "\n"
            summary += "\n"

        finalBreakouts += br + bs
        finalReversals += rr + rs

    // Summary header
    summary += "======================\n"
    summary += "Total Breakouts (All Levels): " + str.tostring(finalBreakouts) + "\n"
    summary += "Total Reversals (All Levels): " + str.tostring(finalReversals) + "\n"

    // Add Hourly Breakdown
    summary += "\n== Breakouts by Hour ==\n"
    for i = 0 to 23
        int count = nz(map.get(breakoutPerHour, i))
        if count > 0
            summary += str.tostring(i) + ":00-" + str.tostring(i + 1) + ":00 : " + str.tostring(count) + "\n"

    summary += "\n== Reversals by Hour ==\n"
    for i = 0 to 23
        int count = nz(map.get(reversalPerHour, i))
        if count > 0
            summary += str.tostring(i) + ":00-" + str.tostring(i + 1) + ":00 : " + str.tostring(count) + "\n"

    if not na(resultLabel)
        label.delete(resultLabel)
    resultLabel := label.new(
        x=bar_index,
        y=close,
        text=summary,
        xloc=xloc.bar_index,
        yloc=yloc.price,
        style=label.style_label_down,
        color=color.new(color.blue, 0),
        textcolor=color.white,
        size=size.large
    )

// ==== Plot (Optional for Debug) ====
plot(totalReversals, title="Total Reversals", color=color.red, display=display.none)
plot(totalBreakouts, title="Total Breakouts", color=color.green, display=display.none)
